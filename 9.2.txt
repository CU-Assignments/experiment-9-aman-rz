import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.annotations.GenericGenerator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.*;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import javax.sql.DataSource;
import java.util.Date;
import java.util.Properties;

import org.apache.commons.dbcp2.BasicDataSource;

public class SpringHibernateBankingApp {

    public static void main(String[] args) {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        BankingService bankingService = context.getBean(BankingService.class);

        bankingService.createAccountIfNotExists(1, "Alice", 5000);
        bankingService.createAccountIfNotExists(2, "Bob", 3000);

        try {
            bankingService.transferMoney(1, 2, 1000); // ✅ Successful transaction
            bankingService.transferMoney(1, 2, 999999); // ❌ This will fail and rollback
        } catch (Exception e) {
            System.out.println("Transaction Failed: " + e.getMessage());
        }

        context.close();
    }

    @Entity
    @Table(name = "account")
    public static class Account {
        @Id
        private int id;
        private String name;
        private double balance;

        public Account() {}
        public Account(int id, String name, double balance) {
            this.id = id;
            this.name = name;
            this.balance = balance;
        }

        public int getId() { return id; }
        public String getName() { return name; }
        public double getBalance() { return balance; }

        public void setBalance(double balance) { this.balance = balance; }
    }

    @Entity
    @Table(name = "transactions")
    public static class TransactionRecord {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private int id;

        private int fromAccount;
        private int toAccount;
        private double amount;
        private Date date;

        public TransactionRecord() {}

        public TransactionRecord(int fromAccount, int toAccount, double amount, Date date) {
            this.fromAccount = fromAccount;
            this.toAccount = toAccount;
            this.amount = amount;
            this.date = date;
        }
    }

    @Service
    public static class BankingService {

        @Autowired
        private SessionFactory sessionFactory;

        public void createAccountIfNotExists(int id, String name, double balance) {
            Session session = sessionFactory.openSession();
            Transaction tx = session.beginTransaction();
            Account acc = session.get(Account.class, id);
            if (acc == null) {
                session.save(new Account(id, name, balance));
            }
            tx.commit();
            session.close();
        }

        @Transactional
        public void transferMoney(int fromId, int toId, double amount) {
            Session session = sessionFactory.getCurrentSession();

            Account from = session.get(Account.class, fromId);
            Account to = session.get(Account.class, toId);

            if (from == null || to == null) {
                throw new RuntimeException("Account not found.");
            }

            if (from.getBalance() < amount) {
                throw new RuntimeException("Insufficient funds!");
            }

            from.setBalance(from.getBalance() - amount);
            to.setBalance(to.getBalance() + amount);

            session.update(from);
            session.update(to);

            TransactionRecord tr = new TransactionRecord(fromId, toId, amount, new Date());
            session.save(tr);

            System.out.println("Transfer successful: " + amount + " from " + from.getName() + " to " + to.getName());
        }
    }

    @Configuration
    @EnableTransactionManagement
    @ComponentScan(basePackageClasses = SpringHibernateBankingApp.class)
    public static class AppConfig {

        @Bean
        public DataSource dataSource() {
            BasicDataSource ds = new BasicDataSource();
            ds.setUrl("jdbc:mysql://localhost:3306/bankdb");
            ds.setUsername("root");
            ds.setPassword("yourpassword");
            ds.setDriverClassName("com.mysql.cj.jdbc.Driver");
            return ds;
        }

        @Bean
        public LocalSessionFactoryBean sessionFactory() {
            LocalSessionFactoryBean factory = new LocalSessionFactoryBean();
            factory.setDataSource(dataSource());
            factory.setPackagesToScan("SpringHibernateBankingApp");
            Properties props = new Properties();
            props.setProperty("hibernate.dialect", "org.hibernate.dialect.MySQLDialect");
            props.setProperty("hibernate.hbm2ddl.auto", "update");
            props.setProperty("hibernate.show_sql", "true");
            factory.setHibernateProperties(props);
            return factory;
        }

        @Bean
        public HibernateTransactionManager transactionManager(SessionFactory sessionFactory) {
            return new HibernateTransactionManager(sessionFactory);
        }
    }
}
